// Generated by CoffeeScript 1.6.3
(function() {
  var ImageResizer, argv, easyimg, fs, happens, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  path = require('path');

  fs = require('fs');

  argv = require('minimist')(process.argv.slice(2));

  happens = require('happens');

  easyimg = require('easyimage');

  module.exports = ImageResizer = (function() {
    ImageResizer.prototype.config = null;

    function ImageResizer() {
      this.crop_image = __bind(this.crop_image, this);
      this.resize_img = __bind(this.resize_img, this);
      this.next_tick = __bind(this.next_tick, this);
      this.events = happens();
    }

    ImageResizer.prototype.resize = function(config) {
      var config_path, dir;
      config_path = path.join(process.cwd(), config.c);
      this.config = require(config_path);
      dir = this.get_dir_from_filepath(config.c);
      this.normalize_folder(this.config, 'source', dir);
      this.normalize_folder(this.config, 'dest_resized', dir);
      this.normalize_folder(this.config, 'dest_cropped', dir);
      this.raw = this.get_files_from_dir(this.config.source);
      console.log("###############");
      console.log("Images to resize and crop: " + this.raw.length);
      console.log("###############");
      this.counter = 0;
      return this.next_tick();
    };

    ImageResizer.prototype.next_tick = function() {
      var image,
        _this = this;
      if (this.counter < this.raw.length) {
        image = this.raw[this.counter++];
        console.log("Image #" + this.counter + " - " + image);
        return easyimg.info(image).then(function(file) {
          var h, w;
          w = file.width;
          h = file.height;
          return _this.resize_img(image, w, h, function() {
            return _this.crop_image(image, w, h, _this.next_tick);
          });
        }, function(err) {
          return console.log('error', err);
        });
      } else {
        return console.log("Resize completed {" + this.config.width_resized + "} - Crop completed {" + this.config.width_cropped + "}");
      }
    };

    ImageResizer.prototype.resize_img = function(image, w, h, callback) {
      var data, dest_file;
      dest_file = this.config.dest_resized + "/" + path.basename(image);
      if (fs.existsSync(dest_file)) {
        fs.unlinkSync(dest_file);
      }
      data = {
        src: image,
        width: this.config.width_resized,
        height: this.config.width_resized * h / w,
        dst: dest_file,
        quality: 75
      };
      return easyimg.resize(data).then(function(file) {
        return callback();
      }, function(err) {
        console.log("Error resizing", err);
        return callback();
      });
    };

    ImageResizer.prototype.crop_image = function(image, w, h, callback) {
      var dest_file, original_size, res_height, res_width,
        _this = this;
      dest_file = this.config.dest_cropped + "/" + path.basename(image);
      if (fs.existsSync(dest_file)) {
        fs.unlinkSync(dest_file);
      }
      if (w > h) {
        res_height = this.config.width_cropped;
        res_width = res_height * w / h;
      } else {
        res_width = this.config.width_cropped;
        res_height = res_width * h / w;
      }
      original_size = Math.min(w, h);
      return easyimg.rescrop({
        src: image,
        dst: dest_file,
        width: res_width,
        height: res_height,
        cropwidth: this.config.width_cropped,
        cropheight: this.config.width_cropped,
        x: 0,
        y: 0
      }).then(function(image) {
        return callback();
      }, function(err) {
        console.log(err);
        return callback();
      });
    };

    ImageResizer.prototype.get_files_from_dir = function(dir) {
      var files, item, output, _i, _len, _ref;
      if (!fs.existsSync(dir)) {
        this.error("Directory " + dir + " doesn't exist.");
        return [];
      }
      files = fs.readdirSync(dir);
      output = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        item = files[_i];
        if (item[0] !== '.' && ((_ref = path.extname(item)) === '.jpg' || _ref === '.png' || _ref === '.jpeg')) {
          output.push(path.join(dir, item));
        }
      }
      return output;
    };

    ImageResizer.prototype.get_dir_from_filepath = function(filepath) {
      var temp;
      temp = filepath.split("/");
      temp.length--;
      return temp.join('/');
    };

    ImageResizer.prototype.normalize_folder = function(obj, prop, relative_path) {
      obj[prop] = path.join(relative_path, obj[prop]);
      if (!fs.existsSync(obj[prop])) {
        return fs.mkdirSync(obj[prop]);
      }
    };

    ImageResizer.prototype.error = function(message) {
      console.error(message);
      return this.events.emit("error", message);
    };

    return ImageResizer;

  })();

}).call(this);
